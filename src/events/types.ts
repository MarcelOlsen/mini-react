/* ************ */
/* Event Types  */
/* ************ */

/**
 * Synthetic event interface that wraps native DOM events with additional
 * MiniReact-compatible functionality and normalized behavior across browsers.
 *
 * @template T - The type of the target element (defaults to Element)
 */
export interface SyntheticEvent<T = Element> {
	/** The original native DOM event */
	nativeEvent: Event;
	/** The element that triggered the event */
	target: T;
	/** The element that the event handler is attached to */
	currentTarget: T;
	/** The type of event (e.g., "click", "keydown") */
	type: string;
	/** Whether the event bubbles up the DOM tree */
	bubbles: boolean;
	/** Whether the event's default action can be prevented */
	cancelable: boolean;
	/** Whether preventDefault() has been called */
	defaultPrevented: boolean;
	/** The event phase (1=capture, 2=target, 3=bubble) */
	eventPhase: number;
	/** Whether the event was generated by user action */
	isTrusted: boolean;
	/** Timestamp when the event was created */
	timeStamp: number;

	/**
	 * Prevents the default action associated with the event.
	 * For example, prevents form submission or link navigation.
	 */
	preventDefault(): void;

	/**
	 * Stops the event from propagating to parent elements.
	 * Prevents both capture and bubble propagation.
	 */
	stopPropagation(): void;

	/**
	 * Stops the event from propagating to parent elements and
	 * prevents other handlers on the same element from executing.
	 */
	stopImmediatePropagation(): void;
}

/**
 * Type for event handler functions that receive synthetic events
 */
export type EventHandler = (event: SyntheticEvent) => void;

/**
 * Internal interface that extends SyntheticEvent with private propagation state properties.
 * These properties are used internally by the event system to track propagation state.
 * @private
 */
export interface InternalSyntheticEvent extends SyntheticEvent {
	/** Internal flag indicating if stopPropagation() was called */
	readonly _propagationStopped: boolean;
	/** Internal flag indicating if stopImmediatePropagation() was called */
	readonly _immediatePropagationStopped: boolean;
}

/**
 * Mapping of MiniReact event names to their corresponding native DOM event names.
 * This ensures consistent event naming across different browsers.
 */
export const MINI_REACT_EVENT_TO_NATIVE_EVENT = {
	/** Mouse click event */
	onClick: "click",
	/** Mouse button pressed down */
	onMouseDown: "mousedown",
	/** Mouse button released */
	onMouseUp: "mouseup",
	/** Mouse enters element */
	onMouseOver: "mouseover",
	/** Mouse leaves element */
	onMouseOut: "mouseout",
	/** Mouse enters element (no bubbling) */
	onMouseEnter: "mouseenter",
	/** Mouse leaves element (no bubbling) */
	onMouseLeave: "mouseleave",
	/** Double click event */
	onDoubleClick: "dblclick",
	/** Context menu event (right-click) */
	onContextMenu: "contextmenu",
	/** Form input value changed */
	onChange: "change",
	/** Form input being typed */
	onInput: "input",
	/** Form submission */
	onSubmit: "submit",
	/** Element gains focus */
	onFocus: "focus",
	/** Element loses focus */
	onBlur: "blur",
	/** Key pressed down */
	onKeyDown: "keydown",
	/** Key released */
	onKeyUp: "keyup",
	/** Key press (deprecated but supported) */
	onKeyPress: "keypress",
	/** Resource finished loading */
	onLoad: "load",
	/** Error occurred during loading */
	onError: "error",
	/** Mouse wheel scrolled */
	onWheel: "wheel",
	/** Element scrolled */
	onScroll: "scroll",
	/** Window/element resized */
	onResize: "resize",
	/** Touch contact started */
	onTouchStart: "touchstart",
	/** Touch contact moved */
	onTouchMove: "touchmove",
	/** Touch contact ended */
	onTouchEnd: "touchend",
	/** Touch contact cancelled */
	onTouchCancel: "touchcancel",
} as const;

/**
 * Union type of all supported MiniReact event names.
 * These are the prop names used in JSX (e.g., onClick, onSubmit).
 */
export type MiniReactEventName = keyof typeof MINI_REACT_EVENT_TO_NATIVE_EVENT;

/**
 * Union type of all corresponding native DOM event names.
 * These are the actual event names used with addEventListener.
 */
export type NativeEventName =
	(typeof MINI_REACT_EVENT_TO_NATIVE_EVENT)[MiniReactEventName];
